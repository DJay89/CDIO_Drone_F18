package VideoListener;

import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;

import de.yadrone.base.IARDrone;
import de.yadrone.base.command.VideoChannel;
import de.yadrone.base.video.ImageListener;


public class Drone extends JFrame
{
	public final static int IMAGE_WIDTH = 1280; // 640 or 1280
    public final static int IMAGE_HEIGHT = 720; // 360 or 720

	
    private static BufferedImage image = null;

    public Drone(final IARDrone drone)
    {
        super("Starting Video feed");

        setSize(IMAGE_WIDTH, IMAGE_HEIGHT);
        setVisible(true);

        drone.getVideoManager().addImageListener(new ImageListener() {
            public void imageUpdated(BufferedImage newImage)
            {
            	image = newImage;
        		SwingUtilities.invokeLater(new Runnable() {
        			public void run()
        			{
        				repaint();
        			}
        		});
            }
        });

        addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
            	drone.getCommandManager().setVideoChannel(VideoChannel.NEXT);
            }
        });

        // close the
        addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e)
			{
				drone.stop();
				System.exit(0);
			}
		});
        
    }
    
    public static Mat BufferedImage2Mat() throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ImageIO.write(image, "jpg", byteArrayOutputStream);
        byteArrayOutputStream.flush();
        return Imgcodecs.imdecode(new MatOfByte(byteArrayOutputStream.toByteArray()), Imgcodecs.CV_LOAD_IMAGE_UNCHANGED);
    }

    public synchronized void paint(Graphics g)
    {
        if (image != null)
			g.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);
    }
}
